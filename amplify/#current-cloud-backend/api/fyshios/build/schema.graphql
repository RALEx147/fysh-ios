type Record {
  id: ID!
  temp: String!
  latitude: String
  longitude: String
  time: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelRecordConnection {
  items: [Record]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelRecordFilterInput {
  id: ModelIDInput
  temp: ModelStringInput
  latitude: ModelStringInput
  longitude: ModelStringInput
  time: ModelStringInput
  and: [ModelRecordFilterInput]
  or: [ModelRecordFilterInput]
  not: ModelRecordFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getRecord(id: ID!): Record
  listRecords(filter: ModelRecordFilterInput, limit: Int, nextToken: String): ModelRecordConnection
}

input CreateRecordInput {
  id: ID
  temp: String!
  latitude: String
  longitude: String
  time: String
}

input UpdateRecordInput {
  id: ID!
  temp: String
  latitude: String
  longitude: String
  time: String
}

input DeleteRecordInput {
  id: ID
}

type Mutation {
  createRecord(input: CreateRecordInput!, condition: ModelRecordConditionInput): Record
  updateRecord(input: UpdateRecordInput!, condition: ModelRecordConditionInput): Record
  deleteRecord(input: DeleteRecordInput!, condition: ModelRecordConditionInput): Record
}

input ModelRecordConditionInput {
  temp: ModelStringInput
  latitude: ModelStringInput
  longitude: ModelStringInput
  time: ModelStringInput
  and: [ModelRecordConditionInput]
  or: [ModelRecordConditionInput]
  not: ModelRecordConditionInput
}

type Subscription {
  onCreateRecord: Record @aws_subscribe(mutations: ["createRecord"])
  onUpdateRecord: Record @aws_subscribe(mutations: ["updateRecord"])
  onDeleteRecord: Record @aws_subscribe(mutations: ["deleteRecord"])
}
